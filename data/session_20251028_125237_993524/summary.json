{
    "timestamp": "20251028_125311",
    "audio_text": "the first clears the new session for folder and it's listening open fights open files",
    "screen_text_samples": [
        "J File Edit Selection View Go Run Terminal Help \u20ac 3 [ Q AGI Assistant1 oO = a x\nEXPLORER ++ | @ pattern_detector.py \u00ae mainpy || {} summaryjson \u00ae summarizer.py \u00ae automation_manager.py DY S&\n> OPEN EDITORS src > \u00ae main.py > \u00a9 process_and_analyze\nQ > SONARQUBE SETUP: GET START... 1 import os, sys, threading, time\nSTSONARGURE SETUIS CONMECTE! from dotenv import load_dotenv\n5 SMAnae An: WS from storage_manager import StorageManager : z\nfrom recorder import record audio wav, record_screen_mp4, show_mic_symbol\n> SONARQUBE SETUP: HELP AND .... mi a \u2014 \u2014 \u2014\nVv\n\nfrom automation manager import AutomationManager\n\n2\n\n3\n\n4\n\n5 from summarizer import Summarizer \u2014\n\nAGI_ASSISTANT1 6 -\n\n\u00a9 7\n8\n5\n\n> Jidea\n> build # If frozen (PyInstaller exe), make project root the parent of dist/\nAL] 5 consg if getattr(sys, \u201cfrozen\u201d, False):\nae 10 exe dir = os.path.dirname(sys.executable) -\nwml saa u project_root = 0s.path.dirname(exe_dir)\n12 os.chdir(os.path.dirname(sys.executable))\n> logs B os.environ[\"PATH\"] = sys. MEIPASS + os.pathsep + os.environ.get(\"PATH\", \"\")\nG | > models a\nv sre 15 load_dotenv(dotenv_path=\"config/.env\" if os.path.exists(\"config/.env\") else \".env\")\n> _pycache_ 16\n5 eae 17 SESSION_DURATION = int(os.getenv(\"SESSION_DURATION\", 1@))\n\n18 AUDIO _SAMPLERATE = int(os.getenv(\"AUDIO SAMPLERATE\u2122, 16000))\n\n\u00ae automation manager.py\n\neis 19 FPS = int(os.getenv(\"FPS\", 10))\n\u201cPY 2@  DATA_PATH = os.getenv(\u201cDATA_PATH\", \u201cdata\u201d)\n\u00ae mic_popup.py 21\u00b0 MAX_SESSIONS = int(os.getenv(\"MAX SESSIONS\u201d, 10))\n\u00ae pattern_detector.py 22. VOSK_MODEL_PATH = os.getenv(\"VOSK_MODEL_PATH\", \u201cmodels/vosk_model\")\n\u00a9 rerorderpy: PROBLEMS \u00a9 OUTPUT \u00a9 DEBUGCONSOLE |TERMINAL| PORTS \u2014 SONARQUBE B] python + v @ -- | co x\n\u00ae storage_manager.py\n\u00a9 somnanen ey \u00a9 Ps C:\\Users\\DEVASISH\\PycharmProjects\\AGI_Assistant1> python src/main.py r\n> temp [INFO] AGI Assistant Started\n> venv jae Created new session folder: data\\session_20251028 125237_993524\nY workflows\n\nAGI_Assistant.spec\n@ README.md\n\n= requirements.txt\n\n@\n$3 > OUTLINE\n\n> TIMELINE\n\nX @0A0_ \u00a9 SonarQube \u2014SonarQube focus: new code Ln 40, Col 44 Space UTF-8 CRLF {} Python & 3.10.5 (venv) @Golive \u00a9 tabnine basic @Prettier O",
        "J File Edit Selection View Go Run Terminal Help \u20ac Q AGI_Assistant1 ) tay Bn _ a x\n\nOo EXPLORER +++ | \u00ae pattern_detector.py \u00ae mainpy || {} summaryjson \u00ae summarizer.py \u00ae automation_manager.py bY S\n> OPEN EDITORS src > @ main.py > \u00a9 process_and_analyze\nQ > SONARQUBE SETUP: GET START... 1 import os, sys, threading, time\n\nfrom dotenv import load_dotenv\nfrom storage _manager import StorageManager\nfrom recorder import record_audio_wav, record_screen_mp4, show_mic_symbol\n\n> SONARQUBE SETUP: CONNECTE... 2\n3\n4\n5 from summarizer import Summarizer\n6\n7\n8\n9\n\nys > SONARQUBE SETUP: RULES\n\n> SONARQUBE SETUP: HELP AND ...|\n AGI_ASSISTANT1\n\nPd\n\nfrom automation_manager import AutomationManager\n\n> idea\n> build # If frozen (PyInstaller exe), make project root the parent of dist/\nB | > contig if getattr(sys, \u201cfrozen\u201d, False):\nae 10 exe dir = os.path.dirname(sys.executable) r\noe uw project_root = 0s.path.dirname(exe_dir)\n12 os.chdir(os.path.dirname(sys.executable))\n> logs 3B os.environ[\"PATH\"] = sys. MEIPASS + os.pathsep + os.environ.get(\"PATH\",\nG | > models \u201c\nv sre 15 load_dotenv(dotenv_path=\"config/.env\" if os.path.exists(\"config/.env\") else \".env\")\n> _pycache_ 16\npk 17 SESSION_DURATION = int(os.getenv(\"SESSION_DURATION\", 1@))\n\n18 AUDIO _SAMPLERATE = int(os.getenv(\"AUDIO SAMPLERATE\u201d, 16000))\n\n\u00ae automation_manager.py\n\nen 19 FPS = int(os.getenv(\"FPS\", 10))\nPy 2@  DATA_PATH = os.getenv(\"DATA_PATH\u201d, \u201cdata\u201d)\n\u00ae mic_popup.py 21\u00b0 MAX_SESSIONS = int(os.getenv(\"MAX SESSIONS\", 10))\n\u00ae pattern_detector.py 22. VOSK_MODEL_PATH = os.getenv(\"VOSK_MODEL_PATH\", \u201cmodels/vosk_model\")\n\u00ae recorderpy PROBLEMS \u00a9 OUTPUT \u00a9 DEBUGCONSOLE = |TERMINAL| PORTS == SONARQUBE BJ python + v @- | 0 x\n\u00ae storage_manager.py\n\n\u00ae summarizer,\nPY, \u00a9 PS C:\\Users\\DEVASISH\\PycharmProjects\\AGI_Assistant1> python src/main.py\n\n> temp [INFO] AGI Assistant Started\n> venv rm\u201d Created new session folder: data\\session_20251028_125237_993524\n~ workflows\n\nAGI_Assistant.spec\nREADME.md\n\nrequirements.txt\n\n\u00ae\n$3 > OUTLINE\n\n> TIMELINE\nX @0A0 \u00a9 SonarQube SonarQube focus: new code Ln 40, Col 44 Spac UTF-8 CRLF {} Python & 3.10.5 (venv) @Golive \u00a9tabnine basic @Prettier O",
        "J File Edit Selection View Go Run Terminal Help \u20ac Q AGI_Assistant1 ) tay Bn _ a x\n\nOo EXPLORER +++ | \u00ae pattern_detector.py \u00ae mainpy || {} summaryjson \u00ae summarizer.py \u00ae automation_manager.py bY S\n> OPEN EDITORS src > @ main.py > \u00a9 process_and_analyze\nQ > SONARQUBE SETUP: GET START... 1 import os, sys, threading, time\n\nfrom dotenv import load_dotenv\nfrom storage _manager import StorageManager\nfrom recorder import record_audio_wav, record_screen_mp4, show_mic_symbol\n\n> SONARQUBE SETUP: CONNECTE... 2\n3\n4\n5 from summarizer import Summarizer\n6\n7\n8\n9\n\nys > SONARQUBE SETUP: RULES\n\n> SONARQUBE SETUP: HELP AND ...|\n AGI_ASSISTANT1\n\nPd\n\nfrom automation_manager import AutomationManager\n\n> idea\n> build # If frozen (PyInstaller exe), make project root the parent of dist/\nB | > contig if getattr(sys, \u201cfrozen\u201d, False):\nae 10 exe dir = os.path.dirname(sys.executable) r\noe uw project_root = 0s.path.dirname(exe_dir)\n12 os.chdir(os.path.dirname(sys.executable))\n> logs 3B os.environ[\"PATH\"] = sys. MEIPASS + os.pathsep + os.environ.get(\"PATH\",\nG | > models \u201c\nv sre 15 load_dotenv(dotenv_path=\"config/.env\" if os.path.exists(\"config/.env\") else \".env\")\n> _pycache_ 16\npk 17 SESSION_DURATION = int(os.getenv(\"SESSION_DURATION\", 1@))\n\n18 AUDIO _SAMPLERATE = int(os.getenv(\"AUDIO SAMPLERATE\u201d, 16000))\n\n\u00ae automation_manager.py\n\nen 19 FPS = int(os.getenv(\"FPS\", 10))\nPy 2@  DATA_PATH = os.getenv(\"DATA_PATH\u201d, \u201cdata\u201d)\n\u00ae mic_popup.py 21\u00b0 MAX_SESSIONS = int(os.getenv(\"MAX SESSIONS\", 10))\n\u00ae pattern_detector.py 22. VOSK_MODEL_PATH = os.getenv(\"VOSK_MODEL_PATH\", \u201cmodels/vosk_model\")\n\u00ae recorderpy PROBLEMS \u00a9 OUTPUT \u00a9 DEBUGCONSOLE = |TERMINAL| PORTS == SONARQUBE BJ python + v @- | 0 x\n\u00ae storage_manager.py\n\n\u00ae summarizer,\nPY, \u00a9 PS C:\\Users\\DEVASISH\\PycharmProjects\\AGI_Assistant1> python src/main.py\n\n> temp [INFO] AGI Assistant Started\n> venv rm\u201d Created new session folder: data\\session_20251028_125237_993524\n~ workflows\n\nAGI_Assistant.spec\nREADME.md\n\nrequirements.txt\n\n\u00ae\n$3 > OUTLINE\n\n> TIMELINE\nX @0A0 \u00a9 SonarQube SonarQube focus: new code Ln 40, Col 44 Spac UTF-8 CRLF {} Python & 3.10.5 (venv) @Golive \u00a9tabnine basic @Prettier O",
        "J File Edit Selection View Go Run Terminal Help \u20ac Q AGI_Assistant1 ) tay Bn _ a x\n\nOo EXPLORER +++ | \u00ae pattern_detector.py \u00ae mainpy || {} summaryjson \u00ae summarizer.py \u00ae automation_manager.py bY S\n> OPEN EDITORS src > @ main.py > \u00a9 process_and_analyze\nQ > SONARQUBE SETUP: GET START... 1 import os, sys, threading, time\n\nfrom dotenv import load_dotenv\nfrom storage _manager import StorageManager\nfrom recorder import record_audio_wav, record_screen_mp4, show_mic_symbol\n\n> SONARQUBE SETUP: CONNECTE... 2\n3\n4\n5 from summarizer import Summarizer\n6\n7\n8\n9\n\nys > SONARQUBE SETUP: RULES\n\n> SONARQUBE SETUP: HELP AND ...|\n AGI_ASSISTANT1\n\nPd\n\nfrom automation_manager import AutomationManager\n\n> idea\n> build # If frozen (PyInstaller exe), make project root the parent of dist/\nB | > contig if getattr(sys, \u201cfrozen\u201d, False):\nae 10 exe dir = os.path.dirname(sys.executable) r\noe uw project_root = 0s.path.dirname(exe_dir)\n12 os.chdir(os.path.dirname(sys.executable))\n> logs 3B os.environ[\"PATH\"] = sys. MEIPASS + os.pathsep + os.environ.get(\"PATH\",\nG | > models \u201c\nv sre 15 load_dotenv(dotenv_path=\"config/.env\" if os.path.exists(\"config/.env\") else \".env\")\n> _pycache_ 16\npk 17 SESSION_DURATION = int(os.getenv(\"SESSION_DURATION\", 1@))\n\n18 AUDIO _SAMPLERATE = int(os.getenv(\"AUDIO SAMPLERATE\u201d, 16000))\n\n\u00ae automation_manager.py\n\nen 19 FPS = int(os.getenv(\"FPS\", 10))\nPy 2@  DATA_PATH = os.getenv(\"DATA_PATH\u201d, \u201cdata\u201d)\n\u00ae mic_popup.py 21\u00b0 MAX_SESSIONS = int(os.getenv(\"MAX SESSIONS\", 10))\n\u00ae pattern_detector.py 22. VOSK_MODEL_PATH = os.getenv(\"VOSK_MODEL_PATH\", \u201cmodels/vosk_model\")\n\u00ae recorderpy PROBLEMS \u00a9 OUTPUT \u00a9 DEBUGCONSOLE = |TERMINAL| PORTS == SONARQUBE BJ python + v @- | 0 x\n\u00ae storage_manager.py\n\n\u00ae summarizer,\nPY, \u00a9 PS C:\\Users\\DEVASISH\\PycharmProjects\\AGI_Assistant1> python src/main.py\n\n> temp [INFO] AGI Assistant Started\n> venv rm\u201d Created new session folder: data\\session_20251028_125237_993524\n~ workflows\n\nAGI_Assistant.spec\nREADME.md\n\nrequirements.txt\n\n\u00ae\n$3 > OUTLINE\n\n> TIMELINE\nX @0A0 \u00a9 SonarQube SonarQube focus: new code Ln 40, Col 44 Spac UTF-8 CRLF {} Python & 3.10.5 (venv) @Golive \u00a9tabnine basic @Prettier O",
        "Q AGI Assistant1 ) ty Bo - ag xX\n\nJ File Edit Selection View Go Run Terminal Help \u20ac > (\nOo EXPLORER +++ | \u00ae pattern_detector.py \u00ae mainpy || {} summaryjson \u00ae summarizer.py \u00ae automation_manager.py bY S\n> OPEN EDITORS src > @ main.py > \u00a9 process_and_analyze\nQ > SONARQUBE SETUP: GET START... 1 import os, sys, threading, time\nfrom dotenv import load_dotenv =\n\n> SONARQUBE SETUP: CONNECTE...|\ngo > SONARQUBE SETUP: RULES\n\n> SONARQUBE SETUP: HELP AND...\nv aciassist... [3 FO @\n\nfrom storage _manager import StorageManager =\nfrom recorder import record_audio_wav, record_screen_mp4, show_mic_symbol\n\n2\n\n3\n\n4\n\n5 from summarizer import Summarizer\n6\n\n7\n\n8\n\n3\n\nfrom automation_manager import AutomationManager\n\n> idea\n> build # If frozen (PyInstaller exe), make project root the parent of dist/\nB | > contig if getattr(sys, \u201cfrozen\u201d, False):\naaa 10 exe dir = os.path.dirname(sys.executable) r\nersrrece , + ou project_root = 0s.path.dirname(exe_dir)\n12 os.chdir(os.path.dirname(sys.executable))\n> logs 3B os.environ[\"PATH\"] = sys. MEIPASS + os.pathsep + os.environ.get(\"PATH\",\nG | > models \u201c\nv sre 15 load_dotenv(dotenv_path=\"config/.env\" if os.path.exists(\"config/.env\") else \".env\")\n> _pycache_ 16\n\u2014a 17 SESSION_DURATION = int(os.getenv(\"SESSION_DURATION\", 1@))\n\nrt 5 18  AUDIO_SAMPLERATE = int(os.getenv(\"AUDIO_SAMPLERATE\u201d, 16000) )\n\u00ae automation_manager.py = =\n\nen 19 FPS = int(os.getenv(\"FPS\", 10))\nPy 2@  DATA_PATH = os.getenv(\"DATA_PATH\u201d, \u201cdata\u201d)\n\u00ae mic_popup.py 21\u00b0 MAX_SESSIONS = int(os.getenv(\"MAX SESSIONS\", 10))\n\u00ae pattern_detector.py 22. VOSK_MODEL_PATH = os.getenv(\"VOSK_MODEL_PATH\", \u201cmodels/vosk_model\")\n\u00ae recorderpy PROBLEMS \u00a9 OUTPUT \u00a9 DEBUGCONSOLE = |TERMINAL| PORTS == SONARQUBE BJ python + v @- | 0 x\n\u00ae storage_manager.py\n\n\u00ae summarizer.py\n\n\u00a9 PS C:\\Users\\DEVASISH\\PycharmProjects\\AGI_Assistant1> python src/main.py\n\n> temp [INFO] AGI Assistant Started\n> venv i Created new session folder: data\\session_20251028_125237_993524\n~ workflows\n\nAGI Assistant spec\nREADME.md\nrequirements.txt\n\n$3 > OUTLINE\n\n> TIMELINE\nX @0A0 \u00a9 SonarQube SonarQube focus: new code\n\nLn 40, Col 44 Space UTF-8 CRLF {} Python &3 3.10.5(venv) @Golive @tabninebasic\u00ae @Prettier O"
    ],
    "detected_actions": [
        {
            "action": "Opened File Explorer",
            "source": "audio"
        },
        {
            "action": "Interacted with screen",
            "source": "ocr"
        }
    ],
    "final_action": "Interacted with screen"
}